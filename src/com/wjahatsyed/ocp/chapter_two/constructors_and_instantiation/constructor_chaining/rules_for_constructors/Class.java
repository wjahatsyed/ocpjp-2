package com.wjahatsyed.ocp.chapter_two.constructors_and_instantiation.constructor_chaining.rules_for_constructors;

/**
 * Created by Syed Wajahat on 10/20/2020.
 */
public class Class {
    /*
    1. Constructors can use any access modifier, including private. (A private constructor means
    only code within the class itself can instantiate an object of that type, so if the private constructor class
    wants to allow an instance of the class to be used, the class must provide a static method or variable that allows
    access to an instance created within the class.)

    2. The constructor name must match the name of the class.

    3. Constructors must not have a return type.

    4. It's legal (but stupid) to have a method with the same name as the class, but that doesn't make it a constructor. If you see
    a return type, it's a method rather than a constructor. In fact, you could have both a method and a constructor with the same
    name - the name of the class - in the same class, and that's not a problem for Java. Be careful not to mistake a method for
    a constructor - be sure to look for a return type.

    5. If you do not type a constructor into your class code, a default constructor will be automatically generated by the
    compiler.

    6. The default constructor is always a no-arg constructor.

    7. If you want a no-arg constructor and you've typed any other constructor(s) into your class code, the compiler won't
    provide the no-arg constructor (or any other constructor) for you. In other words, if you've typed in a constructor with
    arguments, you won't have a no-arg constructor unless you typed it in yourself!

    8. Every constructor has, as its first statement, either a call to an overloaded constructor (this()) or a call to the superclass
    constructor (super()), although remember this call can be inserted by the compiler.

    9. If you do type in a constructor (as opposed to relying on the compiler-generated default constructor) and you do not type
    in the call to super() a call to this(), the compiler will insert a no-arg call to super() for you as the very first statement
    in the constructor.

    10. A no-arg constructor is not necessarily the default (that is, compiler supplied) constructor, although the default constructor
    is always a no-arg constructor. The default constructor is the one the compiler provides! Although the default constructor is always
    a no-arg constructor, you are free to put in your own no-arg constructor.

    11. A call to super() can either be a no-arg call or can include arguments passed to the super constructor.

    12. You cannot make a call to an instance method or access an instance variable until after the super constructor runs.

    13. Only static variables and methods can be accessed as part of the call to the super() or this().
    Check example -> package_2\Animal.java

    14. Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.

    15. Interfaces do not have constructors. Interfaces are not part of an object's inheritance tree.

    16. The only way a constructor can be invoked is from within another constructor. In other words, you cannot write code that
    actually calls a constructor. Or use the new keyword.

    class Horse{
        Horse() //default constructor

        void doStuff(){
            Horse(); //not legal
        }
    }
     */
}
